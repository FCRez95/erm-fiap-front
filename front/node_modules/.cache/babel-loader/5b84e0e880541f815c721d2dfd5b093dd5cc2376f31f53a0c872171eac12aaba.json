{"ast":null,"code":"export const RequireValidator = () => ({\n  type: 'required_field'\n});\n_c = RequireValidator;\nexport const EmailValidator = () => ({\n  type: 'email'\n});\n_c2 = EmailValidator;\nexport const MinLengthValidator = val => ({\n  type: 'min_length',\n  target: val\n});\n_c3 = MinLengthValidator;\nexport const MaxLengthValidator = val => ({\n  type: 'max_length',\n  target: val\n});\n_c4 = MaxLengthValidator;\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === 'required_field') {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === 'min_length' && validator.target) {\n      isValid = isValid && value.trim().length > validator.target;\n    }\n    if (validator.type === 'max_length' && validator.target) {\n      isValid = isValid && value.trim().length < validator.target;\n    }\n    if (validator.type === 'email') {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"RequireValidator\");\n$RefreshReg$(_c2, \"EmailValidator\");\n$RefreshReg$(_c3, \"MinLengthValidator\");\n$RefreshReg$(_c4, \"MaxLengthValidator\");","map":{"version":3,"names":["RequireValidator","type","EmailValidator","MinLengthValidator","val","target","MaxLengthValidator","validate","value","validators","isValid","validator","trim","length","test"],"sources":["/Users/fabiorezende/Documents/projects/tracker/tracker-frontend/src/utils/validators.ts"],"sourcesContent":["export interface Validator {\n    type: string\n    target?: number\n}\n\nexport const RequireValidator = (): Validator => ({\n    type: 'required_field'\n})\n\nexport const EmailValidator = (): Validator => ({\n    type: 'email'\n})\n\nexport const MinLengthValidator = (val: number): Validator => ({\n    type: 'min_length',\n    target: val\n})\n\nexport const MaxLengthValidator = (val: number): Validator => ({\n    type: 'max_length',\n    target: val\n})\n\nexport const validate = (value: string, validators: Validator[]) => {\n    let isValid = true\n    for (const validator of validators) {\n        if (validator.type === 'required_field') {\n            isValid = isValid && value.trim().length > 0\n        }\n        if (validator.type === 'min_length' && validator.target) {\n            isValid = isValid && value.trim().length > validator.target\n        }\n        if (validator.type === 'max_length' && validator.target) {\n            isValid = isValid && value.trim().length < validator.target\n        }\n        if (validator.type === 'email') {\n            isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n          }\n    }\n    return isValid\n}"],"mappings":"AAKA,OAAO,MAAMA,gBAAgB,GAAG,OAAkB;EAC9CC,IAAI,EAAE;AACV,CAAC,CAAC;AAAA,KAFWD,gBAAgB;AAI7B,OAAO,MAAME,cAAc,GAAG,OAAkB;EAC5CD,IAAI,EAAE;AACV,CAAC,CAAC;AAAA,MAFWC,cAAc;AAI3B,OAAO,MAAMC,kBAAkB,GAAIC,GAAW,KAAiB;EAC3DH,IAAI,EAAE,YAAY;EAClBI,MAAM,EAAED;AACZ,CAAC,CAAC;AAAA,MAHWD,kBAAkB;AAK/B,OAAO,MAAMG,kBAAkB,GAAIF,GAAW,KAAiB;EAC3DH,IAAI,EAAE,YAAY;EAClBI,MAAM,EAAED;AACZ,CAAC,CAAC;AAAA,MAHWE,kBAAkB;AAK/B,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAa,EAAEC,UAAuB,KAAK;EAChE,IAAIC,OAAO,GAAG,IAAI;EAClB,KAAK,MAAMC,SAAS,IAAIF,UAAU,EAAE;IAChC,IAAIE,SAAS,CAACV,IAAI,KAAK,gBAAgB,EAAE;MACrCS,OAAO,GAAGA,OAAO,IAAIF,KAAK,CAACI,IAAI,EAAE,CAACC,MAAM,GAAG,CAAC;IAChD;IACA,IAAIF,SAAS,CAACV,IAAI,KAAK,YAAY,IAAIU,SAAS,CAACN,MAAM,EAAE;MACrDK,OAAO,GAAGA,OAAO,IAAIF,KAAK,CAACI,IAAI,EAAE,CAACC,MAAM,GAAGF,SAAS,CAACN,MAAM;IAC/D;IACA,IAAIM,SAAS,CAACV,IAAI,KAAK,YAAY,IAAIU,SAAS,CAACN,MAAM,EAAE;MACrDK,OAAO,GAAGA,OAAO,IAAIF,KAAK,CAACI,IAAI,EAAE,CAACC,MAAM,GAAGF,SAAS,CAACN,MAAM;IAC/D;IACA,IAAIM,SAAS,CAACV,IAAI,KAAK,OAAO,EAAE;MAC5BS,OAAO,GAAGA,OAAO,IAAI,gBAAgB,CAACI,IAAI,CAACN,KAAK,CAAC;IACnD;EACN;EACA,OAAOE,OAAO;AAClB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}