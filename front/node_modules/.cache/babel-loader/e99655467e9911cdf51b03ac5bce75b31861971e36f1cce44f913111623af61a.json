{"ast":null,"code":"var _jsxFileName = \"/Users/fabiorezende/Documents/projects/tracker/tracker-frontend/src/pages/Login/index.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport FormInput from '../../components/FormElements/FormInput';\nimport Button from '../../components/FormElements/Button';\nimport { db } from '../../db/db';\nimport { useForm } from '../../hooks/form-hook';\nimport { RequireValidator, MinLengthValidator, MaxLengthValidator, EmailValidator } from '../../utils/validators';\nimport { Container, FormContainer, AppName } from './styles';\nimport { loadUserData, login } from '../../services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const [formState, inputHandler] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  const submitLogin = async event => {\n    event === null || event === void 0 ? void 0 : event.preventDefault();\n    if (!formState.isValid) {\n      alert('Fill the form with valid data to proceed.');\n      return;\n    }\n    const userInfo = {\n      email: formState.inputs.email.value,\n      password: formState.inputs.password.value\n    };\n    try {\n      const loginResponse = await login(userInfo);\n      const {\n        accessToken\n      } = loginResponse.data;\n      const user = await loadUserData(accessToken);\n      db.user.add(user.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(AppName, {\n      children: \"NewMe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      onSubmit: submitLogin,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        id: \"email\",\n        type: \"email\",\n        label: \"Email\",\n        invalidMessage: \"Please, enter a valid email\",\n        validators: [EmailValidator()],\n        onInput: inputHandler,\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        id: \"password\",\n        type: \"password\",\n        label: \"Password\",\n        invalidMessage: \"Password not valid! Should have between 6 and 12 characters\",\n        validators: [RequireValidator(), MinLengthValidator(5), MaxLengthValidator(12)],\n        onInput: inputHandler,\n        placeholder: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        size: \"medium\",\n        model: \"confirm\",\n        width: \"80%\",\n        mobileWidth: \"80%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"JbpOOWi8ZEG4RUbgHa6zbsBMFMM=\", false, function () {\n  return [useForm];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","FormInput","Button","db","useForm","RequireValidator","MinLengthValidator","MaxLengthValidator","EmailValidator","Container","FormContainer","AppName","loadUserData","login","LoginPage","formState","inputHandler","email","value","isValid","password","submitLogin","event","preventDefault","alert","userInfo","inputs","loginResponse","accessToken","data","user","add","error","console","log"],"sources":["/Users/fabiorezende/Documents/projects/tracker/tracker-frontend/src/pages/Login/index.tsx"],"sourcesContent":["import React, { FormEvent, useState } from 'react'\nimport FormInput from '../../components/FormElements/FormInput'\nimport Button from '../../components/FormElements/Button'\nimport { db } from '../../db/db'\nimport { useForm } from '../../hooks/form-hook'\nimport { RequireValidator, MinLengthValidator, MaxLengthValidator, EmailValidator } from '../../utils/validators'\nimport { Container, FormContainer, AppName } from './styles'\nimport { loadUserData, login } from '../../services'\n\nconst LoginPage = () => {\n  const [formState, inputHandler] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false,\n      },\n      password: {\n        value: '',\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const submitLogin = async (event: FormEvent) => {\n    event?.preventDefault()\n    if (!formState.isValid) {\n      alert('Fill the form with valid data to proceed.')\n      return\n    }\n\n    const userInfo = {\n      email: formState.inputs.email.value,\n      password: formState.inputs.password.value\n    }\n\n    try {\n      const loginResponse = await login(userInfo)\n      const { accessToken } = loginResponse.data\n      const user = await loadUserData(accessToken)\n      \n      db.user.add(user.data)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <Container>\n      <AppName>NewMe</AppName>\n      <FormContainer onSubmit={submitLogin}>\n        <FormInput \n          id='email' \n          type='email'\n          label='Email'\n          invalidMessage='Please, enter a valid email'\n          validators={[EmailValidator()]}\n          onInput={inputHandler}\n          placeholder='Email'\n        />\n\n        <FormInput \n          id='password' \n          type='password'\n          label='Password'\n          invalidMessage='Password not valid! Should have between 6 and 12 characters'\n          validators={[RequireValidator(), MinLengthValidator(5), MaxLengthValidator(12)]}\n          onInput={inputHandler}\n          placeholder='Password'\n        />\n\n        <Button type='submit' size='medium' model='confirm' width='80%' mobileWidth='80%'/>\n      </FormContainer>\n    </Container>\n  )\n}\n\nexport default LoginPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}